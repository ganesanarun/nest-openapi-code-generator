import { Controller, Get, Post, Put, Delete, Body, Param, Query } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiParam, ApiQuery } from '@nestjs/swagger';
{{#if authRequired}}
import { UseGuards } from '@nestjs/common';
import { JwtAuthGuard } from '../common/guards/jwt-auth.guard';
{{/if}}
{{#if rateLimit}}
import { Throttle } from '@nestjs/throttler';
{{/if}}
{{#if customDecorator}}
{{{customDecorator}}}
{{/if}}
import { {{controllerName}}Service } from '../services/{{kebabCase controllerName}}.service';
{{#each imports}}
import { {{this}} } from '../dtos';
{{/each}}

@ApiTags('{{tag}}')
@Controller('{{basePath}}')
{{#if authRequired}}
@UseGuards(JwtAuthGuard)
{{/if}}
{{#if rateLimit}}
@Throttle({{rateLimit}})
{{/if}}
export class {{controllerName}}Controller {
  constructor(private readonly {{camelCase controllerName}}Service: {{controllerName}}Service) {}

{{#each operations}}
  @{{httpMethod}}({{#if path}}'{{path}}'{{/if}})
  @ApiOperation({ summary: '{{summary}}', description: '{{description}}' })
  {{#each responses}}
  @ApiResponse({ status: {{status}}, description: '{{description}}'{{#if schema}}, type: {{schema}}{{/if}} })
  {{/each}}
  {{#each pathParams}}
  @ApiParam({ name: '{{name}}', description: '{{description}}', type: '{{type}}' })
  {{/each}}
  {{#each queryParams}}
  @ApiQuery({ name: '{{name}}', description: '{{description}}', required: {{required}}, type: '{{type}}' })
  {{/each}}
  {{#if customDecorator}}
  {{{customDecorator}}}
  {{/if}}
  async {{operationId}}(
    {{#each pathParams}}
    @Param('{{name}}') {{name}}: {{type}},
    {{/each}}
    {{#if requestBody}}
    @Body() {{requestBody.name}}: {{requestBody.type}},
    {{/if}}
    {{#each queryParams}}
    @Query('{{name}}') {{name}}?: {{type}},
    {{/each}}
  ){{#if returnType}}: Promise<{{returnType}}>{{/if}} {
    {{#if generateService}}
    return this.{{camelCase controllerName}}Service.{{operationId}}(
      {{#each pathParams}}{{name}}{{#unless @last}}, {{/unless}}{{/each}}
      {{#if requestBody}}{{#if pathParams}}, {{/if}}{{requestBody.name}}{{/if}}
      {{#each queryParams}}{{#if @first}}{{#if (or ../pathParams ../requestBody)}}, {{/if}}{{/if}}{{name}}{{#unless @last}}, {{/unless}}{{/each}}
    );
    {{else}}
    // Implementation goes here
    throw new Error('Method not implemented');
    {{/if}}
  }

{{/each}}
}