openapi: 3.1.0
info:
  title: User Management API
  description: A simple user management API for demonstration
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: Development server

paths:
  /users:
    get:
      operationId: getUsers
      summary: Get all users
      description: Retrieve a list of all users
      tags:
        - users
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of users per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      operationId: createUser
      summary: Create a new user
      description: Create a new user account
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /users/{userId}:
    get:
      operationId: getUserById
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          description: The unique identifier of the user
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      operationId: updateUser
      summary: Update user
      description: Update an existing user's information
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          description: The unique identifier of the user
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      operationId: deleteUser
      summary: Delete user
      description: Delete a user account
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          description: The unique identifier of the user
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      type: object
      required:
        - id
        - email
        - firstName
        - lastName
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
          maxLength: 255
        firstName:
          type: string
          description: User's first name
          example: "John"
          minLength: 1
          maxLength: 50
        lastName:
          type: string
          description: User's last name
          example: "Doe"
          minLength: 1
          maxLength: 50
        age:
          type: integer
          description: User's age
          minimum: 13
          maximum: 120
          example: 30
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created
          example: "2023-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user was last updated
          example: "2023-01-15T10:30:00Z"

    CreateUserRequest:
      type: object
      required:
        - email
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          description: User's email address
          maxLength: 255
          example: "john.doe@example.com"
        firstName:
          type: string
          description: User's first name
          minLength: 1
          maxLength: 50
          example: "John"
        lastName:
          type: string
          description: User's last name
          minLength: 1
          maxLength: 50
          example: "Doe"
        age:
          type: integer
          minimum: 13
          maximum: 120
          example: 30

    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          example: "John"
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          example: "Doe"
        age:
          type: integer
          minimum: 13
          maximum: 120
          example: 30

    Pagination:
      type: object
      required:
        - page
        - limit
        - total
        - totalPages
      properties:
        page:
          type: integer
          minimum: 1
          description: Current page number
          example: 1
        limit:
          type: integer
          minimum: 1
          maximum: 100
          description: Number of items per page
          example: 10
        total:
          type: integer
          minimum: 0
          description: Total number of items
          example: 150
        totalPages:
          type: integer
          minimum: 0
          description: Total number of pages
          example: 15

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code
          example: "USER_NOT_FOUND"
        message:
          type: string
          description: Human-readable error message
          example: "The requested user could not be found"
        timestamp:
          type: string
          format: date-time
          description: When the error occurred
          example: "2023-01-15T10:30:00Z"

    ValidationError:
      type: object
      required:
        - code
        - message
        - errors
      properties:
        code:
          type: string
          description: Error code
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: Human-readable error message
          example: "Request validation failed"
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                description: Field that failed validation
                example: "email"
              message:
                type: string
                description: Validation error message
                example: "Invalid email format"